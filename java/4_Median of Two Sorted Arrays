/**
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
*/
public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    int n = nums1.length;
	int m=  nums2.length;
	int numsl[]=(n>m)?nums1:nums2;
	int numss[]=(n<=m)?nums1:nums2;
	//int l=Math.max(m, n);
	int s=Math.min(m, n);
	int b=Math.max(m, n);
	double value=0;
	boolean flag=(((m+n)&1)==1);//奇数为true
	int up=s,low=0;
	int i=(up+low)/2;
	int j;
	int mid=(m+n+1)/2;
	j=mid-i;
	if(s==0)
		value=(double)(numsl[b/2]+numsl[(b-1)/2])/2;
	else
		if(i==0)
			if(flag)
				if(numss[i]<=numsl[b/2-1])
					value=(double)numsl[b/2-1];
				else
					if(numss[i]>=numsl[b/2])
						value=(double)numsl[b/2];
					else
						value=(double)numss[0];
			else
				if(b==1)
					value=(double)(numss[0]+numsl[0])/2;
				else
					if(numss[i]<=numsl[b/2-1])
						value=(double)(numsl[b/2-1]+numsl[b/2])/2;
					else
						if(numss[i]>=numsl[b/2+1])
							value=(double)(numsl[b/2]+numsl[b/2+1])/2;
						else
							value=(double)(numss[0]+numsl[b/2])/2;
		else
		for(;;)
		{
			
		
		if(numss[i-1]>numsl[j])
			up=i;
		else if(numss[i]<numsl[j-1])
			low=i;
		else{
			if(flag)
				value=(double)Math.max(numss[i-1], numsl[j-1]);
			else
				value=(double)(Math.max(numss[i-1], numsl[j-1])+Math.min(numss[i], numsl[j]))/2;
		
		break;
		}
		i=(up+low)/2;
		j=mid-i;
	
		if(i==0){
			if(flag)
				value=(double)numsl[j-1];
			else
				if(j<b)
					
					value=(double)(numsl[j-1]+Math.min(numss[0], numsl[j]))/2;
					else
					value=(double)(numss[0]+numsl[j-1])/2;
			break;
		}	
		if(i==s-1){
			if(flag)
					if(numss[i]>numsl[j-1])
					value=(double)Math.max(numss[i-1], numsl[j-1]);
				else
					value=(double)Math.max(numss[i],numsl[j-2]);
			else
				if(numss[i]>numsl[j-1])
					value=(double)(Math.max(numss[i-1], numsl[j-1])+Math.min(numss[i], numsl[j]))/2;
				else 
					if(j>=2)
						value=(double)(Math.max(numss[i],numsl[j-2])+numsl[j-1])/2;
					else
						value=(double)(numss[i]+numsl[j-1])/2;
			
			break;
		}

	}
	return value;
    }
}
