/*You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1==null)
        return l2;
        if(l2==null)
        return l1;
        int flag=0,sum=0;
        ListNode last = new ListNode(0);
       ListNode pre = l1;
        while(l1!=null&&l2!=null){
           sum= l1.val+l2.val+flag;
            l1.val=sum%10;
            flag=sum/10;
            last=l1;
            l1=l1.next;
            l2=l2.next;
        }
        if(l2!=null){
            last.next=l2;
            l1=l2;
        }
        if(l1==null&&l2==null&&flag==1){
            last.next=new ListNode(flag);
        }
        while(l1!=null){
        sum=flag+l1.val;
         l1.val=sum%10;
         flag=sum/10;
         last=l1;
         l1=l1.next;
      }
         if(flag>0){
             last.next=new ListNode(1);
         }
         
         return pre;
         
         
         
         
         
         
         
    }
}
